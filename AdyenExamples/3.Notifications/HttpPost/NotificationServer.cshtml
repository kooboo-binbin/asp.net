@using System.Diagnostics
@using System.Text

@*
    * Receive notifcations from Adyen (HTTP Post)
    *
    * Whenever a payment is made, a modification is processed or a report is available we will notify you. The
    * notifications tell you for instance if an authorisation was performed successfully. Notifications should be used to
    * keep your backoffice systems up to date with the status of each payment and modification. Notifications are sent
    * using a SOAP call or using HTTP POST to a server of your choice. This file describes how HTTP Post notifcations can
    * be received in Java.
    *
    * @link /3.Notifications/HttpPost/NotificationServer.cshtml
    * @author Created by Adyen - Payments Made Easy
*@

@{
    /**
     * Check authentication
     * 
     * We recommend you to secure your notification server. You can secure it using a username/password which can be
     * configured in the CA. The username and password will be available in the Authorization header of the request.
     * Alternatively, is to allow only traffic that comes from Adyen servers.
     */
    String notificationUser = "TestUser";
    String notificationPassword = "TestPassword";

    string authHeader = Request.Headers["Authorization"];

    //if (authHeader == null)
    //{
    //    throw new HttpException(401, "Unauthorized");
    //}
    //else
    //{
    //    string encodedAuth = authHeader.Split(' ')[1];
    //    string decodedAuth = Encoding.UTF8.GetString(Convert.FromBase64String(encodedAuth));

    //    var requestUser = decodedAuth.Split(':')[0];
    //    var requestPassword = decodedAuth.Split(':')[1];

    //    if (!notificationUser.Equals(requestUser) || !notificationPassword.Equals(requestPassword))
    //    {
    //        throw new HttpException(403, "Forbidden");
    //    }
    //}

    /**
     * Handle notification
     * 
     * The following request parameters are available (see Integration Manual):
     * - live
     * - eventCode
     * - pspReference
     * - originalReference
     * - merchantReference
     * - merchantAccountCode
     * - eventDate
     * - success
     * - paymentMethod
     * - operations
     * - reason
     * - currency
     * 
     * We recommend you to handle the notifications based on the eventCode types available, please refer to the
     * integration manual for a comprehensive list. We also recommend you to save the notification itself.
     */
    switch (Request.Form["eventCode"])
    {
        case "AUTHORISATION":
            // Handle AUTHORISATION notification.
            // Confirms whether the payment was authorised successfully.
            // The authorisation is successful if the "success" field has the value true.
            // In case of an error or a refusal, it will be false and the "reason" field
            // should be consulted for the cause of the authorisation failure.
            break;

        case "CANCELLATION":
            // Handle CANCELLATION notification.
            // Confirms that the payment was cancelled successfully.
            break;

        case "REFUND":
            // Handle REFUND notification.
            // Confirms that the payment was refunded successfully.
            break;

        case "CANCEL_OR_REFUND":
            // Handle CANCEL_OR_REFUND notification.
            // Confirms that the payment was refunded or cancelled successfully.
            break;

        case "CAPTURE":
            // Handle CAPTURE notification.
            // Confirms that the payment was successfully captured.
            break;

        case "REFUNDED_REVERSED":
            // Handle REFUNDED_REVERSED notification.
            // Tells you that the refund for this payment was successfully reversed.
            break;

        case "CAPTURE_FAILED":
            // Handle AUTHORISATION notification.
            // Tells you that the capture on the authorised payment failed.
            break;

        case "REQUEST_FOR_INFORMATION":
            // Handle REQUEST_FOR_INFORMATION notification.
            // Information requested for this payment.
            break;

        case "NOTIFICATION_OF_CHARGEBACK":
            // Handle NOTIFICATION_OF_CHARGEBACK notification.
            // Chargeback is pending, but can still be defended.
            break;

        case "CHARGEBACK":
            // Handle CHARGEBACK notification.
            // Payment was charged back. This is not sent if a REQUEST_FOR_INFORMATION or NOTIFICATION_OF_CHARGEBACK
            // notification has already been sent.
            break;

        case "CHARGEBACK_REVERSED":
            // Handle CHARGEBACK_REVERSED notification.
            // Chargeback has been reversed (cancelled).
            break;

        case "REPORT_AVAILABLE":
            // Handle REPORT_AVAILABLE notification.
            // There is a new report available, the URL of the report is in the "reason" field.
            break;
    }

    // Save the notification in a appropriate way. In this example, the notification is simply logged to the debug console.
    bool notificationSaved = SaveNotification(Request);

    /**
     * Return [accepted]
     * 
     * Please make sure to return [accepted] to us when you have saved/processed the notification. This is essential
     * to let us know that you received the notification. If we do NOT receive [accepted] we try to send the
     * notification again, which will put all other notifications in a queue.
     */
    if (notificationSaved)
    {
    <text>[accepted]</text>
    }
    
}

@functions {
    /**
     * Print all request headers and parameters of a notification to the debug console
     */
    bool SaveNotification(HttpRequestBase request)
    {
        var sb = new StringBuilder();
        sb.AppendLine("***** Received Notification: " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss.fff"));

        sb.AppendLine("Headers:");
        foreach (var headerName in Request.Headers.AllKeys)
        {
            sb.AppendLine("- " + headerName + ": " + Request.Headers[headerName]);
        }

        sb.AppendLine("Parameters:");
        foreach (var paramName in Request.Form.AllKeys)
        {
            sb.AppendLine("- " + paramName + ": " + Request.Form[paramName]);
        }

        sb.AppendLine("****************************************************");
        var path = Server.MapPath(string.Format("~/{0}log.txt", DateTime.Now.ToString("yyyy-MM-dd")));
        using (var sw = new StreamWriter(path, true))
        {
            sw.Write(sb.ToString());
        }
        // Indicate that the notification is saved correctly
        return true;
    }
}